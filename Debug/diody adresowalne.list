
diody adresowalne.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b94  08003b94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b9c  08003b9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba0  08003ba0  00013ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  08003bb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003bb0  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d273  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dea  00000000  00000000  0002d2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026887  00000000  00000000  000305f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de1b  00000000  00000000  00056e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb99e  00000000  00000000  00064c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c4c  00000000  00000000  00150688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b34 	.word	0x08003b34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b34 	.word	0x08003b34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a2e      	ldr	r2, [pc, #184]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b2c      	ldr	r3, [pc, #176]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b29      	ldr	r3, [pc, #164]	; (80005a0 <MX_GPIO_Init+0xd4>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a28      	ldr	r2, [pc, #160]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b23      	ldr	r3, [pc, #140]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_GPIO_Init+0xd4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_GPIO_Init+0xd4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f000 ff31 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800054e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000554:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800055a:	2301      	movs	r3, #1
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	480f      	ldr	r0, [pc, #60]	; (80005a4 <MX_GPIO_Init+0xd8>)
 8000566:	f000 fd79 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800056a:	2320      	movs	r3, #32
 800056c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fd6a 	bl	800105c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2028      	movs	r0, #40	; 0x28
 800058e:	f000 fd2e 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000592:	2028      	movs	r0, #40	; 0x28
 8000594:	f000 fd47 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000800 	.word	0x48000800

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	for(int i=0;i<72;i++)
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	e007      	b.n	80005c4 <main+0x1c>
		{
			buff[i]=0;
 80005b4:	4a41      	ldr	r2, [pc, #260]	; (80006bc <main+0x114>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<72;i++)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3301      	adds	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b47      	cmp	r3, #71	; 0x47
 80005c8:	ddf4      	ble.n	80005b4 <main+0xc>
		}
	for(int i=0;i<49;i++)
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	e007      	b.n	80005e0 <main+0x38>
	{
		reset_buffer[i]=0;
 80005d0:	4a3b      	ldr	r2, [pc, #236]	; (80006c0 <main+0x118>)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<49;i++)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	2b30      	cmp	r3, #48	; 0x30
 80005e4:	ddf4      	ble.n	80005d0 <main+0x28>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fb87 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f871 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f7ff ff6d 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 facb 	bl	8000b8c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80005f6:	f000 f9c1 	bl	800097c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  single_color.blue=0;
 80005fa:	4b32      	ldr	r3, [pc, #200]	; (80006c4 <main+0x11c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	709a      	strb	r2, [r3, #2]
  single_color.green=0;
 8000600:	4b30      	ldr	r3, [pc, #192]	; (80006c4 <main+0x11c>)
 8000602:	2200      	movs	r2, #0
 8000604:	705a      	strb	r2, [r3, #1]
  single_color.red=255;
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <main+0x11c>)
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	701a      	strb	r2, [r3, #0]

  HAL_SPI_Init(&hspi2);
 800060c:	482e      	ldr	r0, [pc, #184]	; (80006c8 <main+0x120>)
 800060e:	f002 fa39 	bl	8002a84 <HAL_SPI_Init>

  Load_Color_Into_Buffer(single_color,&buff[0]);
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <main+0x11c>)
 8000614:	4929      	ldr	r1, [pc, #164]	; (80006bc <main+0x114>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f000 f946 	bl	80008a8 <Load_Color_Into_Buffer>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Set_LED_Queue(single_color,1);

	  switch(switch_mode){
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <main+0x124>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d846      	bhi.n	80006b2 <main+0x10a>
 8000624:	a201      	add	r2, pc, #4	; (adr r2, 800062c <main+0x84>)
 8000626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062a:	bf00      	nop
 800062c:	08000645 	.word	0x08000645
 8000630:	08000653 	.word	0x08000653
 8000634:	0800065f 	.word	0x0800065f
 8000638:	08000665 	.word	0x08000665
 800063c:	0800067f 	.word	0x0800067f
 8000640:	08000699 	.word	0x08000699
	  case 0:
		  Reset_LED_color();
 8000644:	f000 f908 	bl	8000858 <Reset_LED_color>
		  Set_One_Color(single_color);
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <main+0x11c>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	f000 f8b2 	bl	80007b4 <Set_One_Color>
		  break;
 8000650:	e02f      	b.n	80006b2 <main+0x10a>

	  case 1:
		  Set_LED_Queue(single_color,1);
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <main+0x11c>)
 8000654:	2101      	movs	r1, #1
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	f000 f8ce 	bl	80007f8 <Set_LED_Queue>
		  break;
 800065c:	e029      	b.n	80006b2 <main+0x10a>

	  case 2:
		  Reset_LED_color();
 800065e:	f000 f8fb 	bl	8000858 <Reset_LED_color>
		  break;
 8000662:	e026      	b.n	80006b2 <main+0x10a>

	  case 3:
		  single_color.red=single_color.red+10;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0x11c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	330a      	adds	r3, #10
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x11c>)
 800066e:	701a      	strb	r2, [r3, #0]
		  Reset_LED_color();
 8000670:	f000 f8f2 	bl	8000858 <Reset_LED_color>
		  Set_One_Color(single_color);
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x11c>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	f000 f89c 	bl	80007b4 <Set_One_Color>
		  break;
 800067c:	e019      	b.n	80006b2 <main+0x10a>

	  case 4:
		  single_color.green=single_color.green+10;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <main+0x11c>)
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	330a      	adds	r3, #10
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <main+0x11c>)
 8000688:	705a      	strb	r2, [r3, #1]
		  Reset_LED_color();
 800068a:	f000 f8e5 	bl	8000858 <Reset_LED_color>
		  Set_One_Color(single_color);
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <main+0x11c>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f000 f88f 	bl	80007b4 <Set_One_Color>
		  break;
 8000696:	e00c      	b.n	80006b2 <main+0x10a>

	  case 5:
	 	  single_color.blue=single_color.blue+10;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <main+0x11c>)
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	330a      	adds	r3, #10
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <main+0x11c>)
 80006a2:	709a      	strb	r2, [r3, #2]
	 	 Reset_LED_color();
 80006a4:	f000 f8d8 	bl	8000858 <Reset_LED_color>
	 	  Set_One_Color(single_color);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <main+0x11c>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	f000 f882 	bl	80007b4 <Set_One_Color>
	 	 break;
 80006b0:	bf00      	nop
	  }

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	  	HAL_Delay(500);
 80006b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b6:	f000 fb9b 	bl	8000df0 <HAL_Delay>
	  switch(switch_mode){
 80006ba:	e7af      	b.n	800061c <main+0x74>
 80006bc:	20000028 	.word	0x20000028
 80006c0:	20000070 	.word	0x20000070
 80006c4:	200000a0 	.word	0x200000a0
 80006c8:	200000a4 	.word	0x200000a4
 80006cc:	200000a3 	.word	0x200000a3

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	; 0x58
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	; 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fa20 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f6:	f000 feb3 	bl	8001460 <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000700:	f000 f936 	bl	8000970 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070e:	2310      	movs	r3, #16
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 800071e:	2309      	movs	r3, #9
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000722:	2307      	movs	r3, #7
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f000 feea 	bl	800150c <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800073e:	f000 f917 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2303      	movs	r3, #3
 8000748:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fab2 	bl	8001cc4 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f903 	bl	8000970 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3758      	adds	r7, #88	; 0x58
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <Send_Reset>:
	HAL_Delay(500);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
	HAL_Delay(500);
}
void Send_Reset()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	for(int i=0;i<49;i++)
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e007      	b.n	8000790 <Send_Reset+0x1c>
		{
			reset_buffer[i]=0;
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <Send_Reset+0x38>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<49;i++)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3301      	adds	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b30      	cmp	r3, #48	; 0x30
 8000794:	ddf4      	ble.n	8000780 <Send_Reset+0xc>
		}
	HAL_SPI_Transmit(&hspi2, &reset_buffer[0], 48, 1000);
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	4903      	ldr	r1, [pc, #12]	; (80007ac <Send_Reset+0x38>)
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <Send_Reset+0x3c>)
 80007a0:	f002 fa13 	bl	8002bca <HAL_SPI_Transmit>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000070 	.word	0x20000070
 80007b0:	200000a4 	.word	0x200000a4

080007b4 <Set_One_Color>:
void Set_One_Color(RGB_color color)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	Load_Color_Into_Buffer(color,&buff[0]);
 80007bc:	490c      	ldr	r1, [pc, #48]	; (80007f0 <Set_One_Color+0x3c>)
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f872 	bl	80008a8 <Load_Color_Into_Buffer>
	for(int i=0;i<MAX_LED_NUMBER;i++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	e009      	b.n	80007de <Set_One_Color+0x2a>
		  	{
			  HAL_SPI_Transmit(&hspi2, &buff[0], 28, 1000);
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	221c      	movs	r2, #28
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <Set_One_Color+0x3c>)
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <Set_One_Color+0x40>)
 80007d4:	f002 f9f9 	bl	8002bca <HAL_SPI_Transmit>
	for(int i=0;i<MAX_LED_NUMBER;i++)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3301      	adds	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b05      	cmp	r3, #5
 80007e2:	ddf2      	ble.n	80007ca <Set_One_Color+0x16>
		  	}

			Send_Reset();
 80007e4:	f7ff ffc6 	bl	8000774 <Send_Reset>
		  //HAL_SPI_Transmit(&hspi2, &reset_buffer[0], 48, 1000);

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000028 	.word	0x20000028
 80007f4:	200000a4 	.word	0x200000a4

080007f8 <Set_LED_Queue>:
void Set_LED_Queue(RGB_color color, uint8_t mode)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t current_LED=0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
	while(current_LED<=MAX_LED_NUMBER){
 8000808:	e019      	b.n	800083e <Set_LED_Queue+0x46>
		for(int i=0;i<current_LED;i++)
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	e009      	b.n	8000824 <Set_LED_Queue+0x2c>
			  	{
				  HAL_SPI_Transmit(&hspi2, &buff[0], 28, 1000);
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	221c      	movs	r2, #28
 8000816:	490e      	ldr	r1, [pc, #56]	; (8000850 <Set_LED_Queue+0x58>)
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <Set_LED_Queue+0x5c>)
 800081a:	f002 f9d6 	bl	8002bca <HAL_SPI_Transmit>
		for(int i=0;i<current_LED;i++)
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf1      	blt.n	8000810 <Set_LED_Queue+0x18>

			  	}
		current_LED++;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	3301      	adds	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(500);
 8000832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000836:	f000 fadb 	bl	8000df0 <HAL_Delay>

		Send_Reset();
 800083a:	f7ff ff9b 	bl	8000774 <Send_Reset>
	while(current_LED<=MAX_LED_NUMBER){
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	2b06      	cmp	r3, #6
 8000842:	d9e2      	bls.n	800080a <Set_LED_Queue+0x12>


}
	 Reset_LED_color();
 8000844:	f000 f808 	bl	8000858 <Reset_LED_color>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000028 	.word	0x20000028
 8000854:	200000a4 	.word	0x200000a4

08000858 <Reset_LED_color>:
void Reset_LED_color()
{	RGB_color c;
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	c.red=0;
 800085e:	2300      	movs	r3, #0
 8000860:	703b      	strb	r3, [r7, #0]
	c.green=0;
 8000862:	2300      	movs	r3, #0
 8000864:	707b      	strb	r3, [r7, #1]
	c.blue=0;
 8000866:	2300      	movs	r3, #0
 8000868:	70bb      	strb	r3, [r7, #2]
	Load_Color_Into_Buffer(c,&reset_buffer[0]);
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <Reset_LED_color+0x48>)
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f000 f81b 	bl	80008a8 <Load_Color_Into_Buffer>
	for(int i=0;i<MAX_LED_NUMBER;i++)
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e009      	b.n	800088c <Reset_LED_color+0x34>
			  	{
				  HAL_SPI_Transmit(&hspi2, &reset_buffer[0], 28, 1000);
 8000878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087c:	221c      	movs	r2, #28
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <Reset_LED_color+0x48>)
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <Reset_LED_color+0x4c>)
 8000882:	f002 f9a2 	bl	8002bca <HAL_SPI_Transmit>
	for(int i=0;i<MAX_LED_NUMBER;i++)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b05      	cmp	r3, #5
 8000890:	ddf2      	ble.n	8000878 <Reset_LED_color+0x20>
			  	}
	Send_Reset();
 8000892:	f7ff ff6f 	bl	8000774 <Send_Reset>

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000070 	.word	0x20000070
 80008a4:	200000a4 	.word	0x200000a4

080008a8 <Load_Color_Into_Buffer>:
void Load_Color_Into_Buffer(RGB_color set_color, uint8_t *buffer)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
		uint8_t color_t;
		uint8_t color[3];
		uint8_t k=0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]
		//char msg[64];
		color[0]=set_color.green;
 80008b6:	797b      	ldrb	r3, [r7, #5]
 80008b8:	723b      	strb	r3, [r7, #8]
		color[1]=set_color.red;
 80008ba:	793b      	ldrb	r3, [r7, #4]
 80008bc:	727b      	strb	r3, [r7, #9]
		color[2]=set_color.blue;
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	72bb      	strb	r3, [r7, #10]
		for(uint8_t i = 0; i < 3; i++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	737b      	strb	r3, [r7, #13]
 80008c6:	e026      	b.n	8000916 <Load_Color_Into_Buffer+0x6e>
			color_t=color[i];
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	3310      	adds	r3, #16
 80008cc:	443b      	add	r3, r7
 80008ce:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80008d2:	73fb      	strb	r3, [r7, #15]
			for(uint8_t j = 0; j < 8; j++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	733b      	strb	r3, [r7, #12]
 80008d8:	e017      	b.n	800090a <Load_Color_Into_Buffer+0x62>
			{
				if(color_t&0b10000000)
 80008da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da05      	bge.n	80008ee <Load_Color_Into_Buffer+0x46>
				{buffer[k]=ONE;
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	683a      	ldr	r2, [r7, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	22f8      	movs	r2, #248	; 0xf8
 80008ea:	701a      	strb	r2, [r3, #0]
 80008ec:	e004      	b.n	80008f8 <Load_Color_Into_Buffer+0x50>
				}
				else
				{
					buffer[k]=ZERO;
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	22c0      	movs	r2, #192	; 0xc0
 80008f6:	701a      	strb	r2, [r3, #0]
				}
				k++;
 80008f8:	7bbb      	ldrb	r3, [r7, #14]
 80008fa:	3301      	adds	r3, #1
 80008fc:	73bb      	strb	r3, [r7, #14]
				color_t=color_t<<1;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
			for(uint8_t j = 0; j < 8; j++)
 8000904:	7b3b      	ldrb	r3, [r7, #12]
 8000906:	3301      	adds	r3, #1
 8000908:	733b      	strb	r3, [r7, #12]
 800090a:	7b3b      	ldrb	r3, [r7, #12]
 800090c:	2b07      	cmp	r3, #7
 800090e:	d9e4      	bls.n	80008da <Load_Color_Into_Buffer+0x32>
		for(uint8_t i = 0; i < 3; i++){
 8000910:	7b7b      	ldrb	r3, [r7, #13]
 8000912:	3301      	adds	r3, #1
 8000914:	737b      	strb	r3, [r7, #13]
 8000916:	7b7b      	ldrb	r3, [r7, #13]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d9d5      	bls.n	80008c8 <Load_Color_Into_Buffer+0x20>
			}
		}
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_13){
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800093c:	d111      	bne.n	8000962 <HAL_GPIO_EXTI_Callback+0x36>
		switch_mode++;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_GPIO_EXTI_Callback+0x40>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_GPIO_EXTI_Callback+0x40>)
 8000948:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800094a:	2120      	movs	r1, #32
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fd46 	bl	80013e0 <HAL_GPIO_TogglePin>
		if(switch_mode>5){switch_mode=0;}
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_GPIO_EXTI_Callback+0x40>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b05      	cmp	r3, #5
 800095a:	d902      	bls.n	8000962 <HAL_GPIO_EXTI_Callback+0x36>
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GPIO_EXTI_Callback+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]


	}
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000a3 	.word	0x200000a3

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_SPI2_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	; (80009f4 <MX_SPI2_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_SPI2_Init+0x74>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_SPI2_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI2_Init+0x74>)
 8000996:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800099a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI2_Init+0x74>)
 800099e:	2202      	movs	r2, #2
 80009a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009b2:	2210      	movs	r2, #16
 80009b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009d6:	2208      	movs	r2, #8
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_SPI2_Init+0x74>)
 80009dc:	f002 f852 	bl	8002a84 <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009e6:	f7ff ffc3 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000a4 	.word	0x200000a4
 80009f4:	40003800 	.word	0x40003800

080009f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a25      	ldr	r2, [pc, #148]	; (8000aac <HAL_SPI_MspInit+0xb4>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d144      	bne.n	8000aa4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6593      	str	r3, [r2, #88]	; 0x58
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_SPI_MspInit+0xb8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a62:	2308      	movs	r3, #8
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a72:	2305      	movs	r3, #5
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <HAL_SPI_MspInit+0xbc>)
 8000a7e:	f000 faed 	bl	800105c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a94:	2305      	movs	r3, #5
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <HAL_SPI_MspInit+0xc0>)
 8000aa0:	f000 fadc 	bl	800105c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40003800 	.word	0x40003800
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000800 	.word	0x48000800
 8000ab8:	48000400 	.word	0x48000400

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <NMI_Handler+0x4>

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f92e 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b60:	f000 fc58 	bl	8001414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_USART2_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0x58>)
 8000bd0:	f002 face 	bl	8003170 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f7ff fec9 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000108 	.word	0x20000108
 8000be8:	40004400 	.word	0x40004400

08000bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0ac      	sub	sp, #176	; 0xb0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2288      	movs	r2, #136	; 0x88
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 ff89 	bl	8003b24 <memset>
  if(uartHandle->Instance==USART2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <HAL_UART_MspInit+0xb0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d13b      	bne.n	8000c94 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fa6f 	bl	800210c <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c34:	f7ff fe9c 	bl	8000970 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c42:	6593      	str	r3, [r2, #88]	; 0x58
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c90:	f000 f9e4 	bl	800105c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c94:	bf00      	nop
 8000c96:	37b0      	adds	r7, #176	; 0xb0
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ff5e 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 ff03 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fc67 	bl	80005a8 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce8:	08003ba4 	.word	0x08003ba4
  ldr r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf0:	20000190 	.word	0x20000190

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_Init+0x3c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_Init+0x3c>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f962 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f80f 	bl	8000d38 <HAL_InitTick>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e001      	b.n	8000d2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d26:	f7ff fec9 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d023      	beq.n	8000d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_InitTick+0x6c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f96d 	bl	8001042 <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d809      	bhi.n	8000d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 f937 	bl	8000fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_InitTick+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e007      	b.n	8000d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e001      	b.n	8000d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	2000018c 	.word	0x2000018c

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	2000018c 	.word	0x2000018c

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	e17f      	b.n	800136c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8171 	beq.w	8001366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d005      	beq.n	800109c <HAL_GPIO_Init+0x40>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d130      	bne.n	80010fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010d2:	2201      	movs	r2, #1
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	f003 0201 	and.w	r2, r3, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b03      	cmp	r3, #3
 8001108:	d118      	bne.n	800113c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	6939      	ldr	r1, [r7, #16]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80ac 	beq.w	8001366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_GPIO_Init+0x330>)
 8001210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001212:	4a5e      	ldr	r2, [pc, #376]	; (800138c <HAL_GPIO_Init+0x330>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6613      	str	r3, [r2, #96]	; 0x60
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_GPIO_Init+0x330>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001226:	4a5a      	ldr	r2, [pc, #360]	; (8001390 <HAL_GPIO_Init+0x334>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x242>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_GPIO_Init+0x338>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x23e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_GPIO_Init+0x33c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x23a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4d      	ldr	r2, [pc, #308]	; (800139c <HAL_GPIO_Init+0x340>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x236>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x344>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x232>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_GPIO_Init+0x348>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x22e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4a      	ldr	r2, [pc, #296]	; (80013a8 <HAL_GPIO_Init+0x34c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x22a>
 8001282:	2306      	movs	r3, #6
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 8001286:	2307      	movs	r3, #7
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x244>
 800129e:	2300      	movs	r3, #0
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012b0:	4937      	ldr	r1, [pc, #220]	; (8001390 <HAL_GPIO_Init+0x334>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012be:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_GPIO_Init+0x350>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e2:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_GPIO_Init+0x350>)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_GPIO_Init+0x350>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_GPIO_Init+0x350>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_GPIO_Init+0x350>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_GPIO_Init+0x350>)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_GPIO_Init+0x350>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_GPIO_Init+0x350>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	f47f ae78 	bne.w	800106c <HAL_GPIO_Init+0x10>
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000
 8001390:	40010000 	.word	0x40010000
 8001394:	48000400 	.word	0x48000400
 8001398:	48000800 	.word	0x48000800
 800139c:	48000c00 	.word	0x48000c00
 80013a0:	48001000 	.word	0x48001000
 80013a4:	48001400 	.word	0x48001400
 80013a8:	48001800 	.word	0x48001800
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4013      	ands	r3, r2
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43d9      	mvns	r1, r3
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	400b      	ands	r3, r1
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fa7a 	bl	800092c <HAL_GPIO_EXTI_Callback>
  }
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_PWREx_GetVoltageRange+0x18>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40007000 	.word	0x40007000

08001460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800146e:	d130      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147c:	d038      	beq.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2232      	movs	r2, #50	; 0x32
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a4:	e002      	b.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d102      	bne.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f2      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014cc:	d110      	bne.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e00f      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d007      	beq.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e8:	4a05      	ldr	r2, [pc, #20]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83

0800150c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e3ca      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151e:	4b97      	ldr	r3, [pc, #604]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001528:	4b94      	ldr	r3, [pc, #592]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80e4 	beq.w	8001708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <HAL_RCC_OscConfig+0x4a>
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	f040 808b 	bne.w	8001664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b01      	cmp	r3, #1
 8001552:	f040 8087 	bne.w	8001664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001556:	4b89      	ldr	r3, [pc, #548]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <HAL_RCC_OscConfig+0x62>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e3a2      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1a      	ldr	r2, [r3, #32]
 8001572:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d004      	beq.n	8001588 <HAL_RCC_OscConfig+0x7c>
 800157e:	4b7f      	ldr	r3, [pc, #508]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001586:	e005      	b.n	8001594 <HAL_RCC_OscConfig+0x88>
 8001588:	4b7c      	ldr	r3, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001594:	4293      	cmp	r3, r2
 8001596:	d223      	bcs.n	80015e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fd55 	bl	800204c <RCC_SetFlashLatencyFromMSIRange>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e383      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ac:	4b73      	ldr	r3, [pc, #460]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a72      	ldr	r2, [pc, #456]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b70      	ldr	r3, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	496d      	ldr	r1, [pc, #436]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ca:	4b6c      	ldr	r3, [pc, #432]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4968      	ldr	r1, [pc, #416]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
 80015de:	e025      	b.n	800162c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	4b66      	ldr	r3, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a65      	ldr	r2, [pc, #404]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4960      	ldr	r1, [pc, #384]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fe:	4b5f      	ldr	r3, [pc, #380]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	495b      	ldr	r1, [pc, #364]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fd15 	bl	800204c <RCC_SetFlashLatencyFromMSIRange>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e343      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800162c:	f000 fc4a 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001630:	4602      	mov	r2, r0
 8001632:	4b52      	ldr	r3, [pc, #328]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	4950      	ldr	r1, [pc, #320]	; (8001780 <HAL_RCC_OscConfig+0x274>)
 800163e:	5ccb      	ldrb	r3, [r1, r3]
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	fa22 f303 	lsr.w	r3, r2, r3
 8001648:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <HAL_RCC_OscConfig+0x278>)
 800164a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800164c:	4b4e      	ldr	r3, [pc, #312]	; (8001788 <HAL_RCC_OscConfig+0x27c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb71 	bl	8000d38 <HAL_InitTick>
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d052      	beq.n	8001706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	e327      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d032      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800166c:	4b43      	ldr	r3, [pc, #268]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001678:	f7ff fbae 	bl	8000dd8 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001680:	f7ff fbaa 	bl	8000dd8 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e310      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4931      	ldr	r1, [pc, #196]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	492c      	ldr	r1, [pc, #176]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e01a      	b.n	8001708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a29      	ldr	r2, [pc, #164]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb7b 	bl	8000dd8 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb77 	bl	8000dd8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e2dd      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x1da>
 8001704:	e000      	b.n	8001708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d074      	beq.n	80017fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b08      	cmp	r3, #8
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x21a>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d10e      	bne.n	800173e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d10b      	bne.n	800173e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d064      	beq.n	80017fc <HAL_RCC_OscConfig+0x2f0>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d160      	bne.n	80017fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e2ba      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x24a>
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800174e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e026      	b.n	80017a4 <HAL_RCC_OscConfig+0x298>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800175e:	d115      	bne.n	800178c <HAL_RCC_OscConfig+0x280>
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_RCC_OscConfig+0x270>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a02      	ldr	r2, [pc, #8]	; (800177c <HAL_RCC_OscConfig+0x270>)
 8001772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x298>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	08003b4c 	.word	0x08003b4c
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004
 800178c:	4ba0      	ldr	r3, [pc, #640]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a9f      	ldr	r2, [pc, #636]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b9d      	ldr	r3, [pc, #628]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a9c      	ldr	r2, [pc, #624]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800179e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fb14 	bl	8000dd8 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fb10 	bl	8000dd8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e276      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c6:	4b92      	ldr	r3, [pc, #584]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2a8>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb00 	bl	8000dd8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fafc 	bl	8000dd8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e262      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x2d0>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d060      	beq.n	80018cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x310>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d119      	bne.n	800184a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d116      	bne.n	800184a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_OscConfig+0x328>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e23f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b76      	ldr	r3, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	4973      	ldr	r1, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001848:	e040      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d023      	beq.n	800189a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001852:	4b6f      	ldr	r3, [pc, #444]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6e      	ldr	r2, [pc, #440]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fabb 	bl	8000dd8 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fab7 	bl	8000dd8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e21d      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001878:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	4b62      	ldr	r3, [pc, #392]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	495f      	ldr	r1, [pc, #380]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
 8001898:	e018      	b.n	80018cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a5c      	ldr	r2, [pc, #368]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff fa97 	bl	8000dd8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fa93 	bl	8000dd8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1f9      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d03c      	beq.n	8001952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01c      	beq.n	800191a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e6:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa72 	bl	8000dd8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff fa6e 	bl	8000dd8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1d4      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ef      	beq.n	80018f8 <HAL_RCC_OscConfig+0x3ec>
 8001918:	e01b      	b.n	8001952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800191c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001920:	4a3b      	ldr	r2, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff fa55 	bl	8000dd8 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff fa51 	bl	8000dd8 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1b7      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ef      	bne.n	8001932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80a6 	beq.w	8001aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10d      	bne.n	800198c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001988:	2301      	movs	r3, #1
 800198a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001994:	2b00      	cmp	r3, #0
 8001996:	d118      	bne.n	80019ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a4:	f7ff fa18 	bl	8000dd8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f7ff fa14 	bl	8000dd8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e17a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_RCC_OscConfig+0x508>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4d8>
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e2:	e029      	b.n	8001a38 <HAL_RCC_OscConfig+0x52c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b05      	cmp	r3, #5
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_OscConfig+0x50c>
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0c:	e014      	b.n	8001a38 <HAL_RCC_OscConfig+0x52c>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40007000 	.word	0x40007000
 8001a18:	4b9c      	ldr	r3, [pc, #624]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a28:	4b98      	ldr	r3, [pc, #608]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	4a97      	ldr	r2, [pc, #604]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d016      	beq.n	8001a6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff f9ca 	bl	8000dd8 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff f9c6 	bl	8000dd8 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e12a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a5e:	4b8b      	ldr	r3, [pc, #556]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ed      	beq.n	8001a48 <HAL_RCC_OscConfig+0x53c>
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f9b3 	bl	8000dd8 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff f9af 	bl	8000dd8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e113      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ed      	bne.n	8001a76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	4b7a      	ldr	r3, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	4a79      	ldr	r2, [pc, #484]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80fe 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	f040 80d0 	bne.w	8001c60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ac0:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d130      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d127      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11f      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b00:	2a07      	cmp	r2, #7
 8001b02:	bf14      	ite	ne
 8001b04:	2201      	movne	r2, #1
 8001b06:	2200      	moveq	r2, #0
 8001b08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d113      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d06e      	beq.n	8001c14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d069      	beq.n	8001c10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0ad      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a4b      	ldr	r2, [pc, #300]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b64:	f7ff f938 	bl	8000dd8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff f934 	bl	8000dd8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e09a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b8a:	4b40      	ldr	r3, [pc, #256]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	4b40      	ldr	r3, [pc, #256]	; (8001c90 <HAL_RCC_OscConfig+0x784>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bac:	0852      	lsrs	r2, r2, #1
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	0552      	lsls	r2, r2, #21
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb8:	0852      	lsrs	r2, r2, #1
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	0652      	lsls	r2, r2, #25
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bc4:	0912      	lsrs	r2, r2, #4
 8001bc6:	0452      	lsls	r2, r2, #17
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	4930      	ldr	r1, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be8:	f7ff f8f6 	bl	8000dd8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f8f2 	bl	8000dd8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c0e:	e050      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e04f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d148      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c20:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c38:	f7ff f8ce 	bl	8000dd8 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f8ca 	bl	8000dd8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e030      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x734>
 8001c5e:	e028      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2b0c      	cmp	r3, #12
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_RCC_OscConfig+0x780>)
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f8b1 	bl	8000dd8 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e00c      	b.n	8001c94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f8ad 	bl	8000dd8 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d905      	bls.n	8001c94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x7b0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ec      	bne.n	8001c7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x7b0>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	4905      	ldr	r1, [pc, #20]	; (8001cbc <HAL_RCC_OscConfig+0x7b0>)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_OscConfig+0x7b4>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
 8001cac:	e001      	b.n	8001cb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	feeefffc 	.word	0xfeeefffc

08001cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0e7      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d910      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4970      	ldr	r1, [pc, #448]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0cf      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d010      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d908      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4960      	ldr	r1, [pc, #384]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d04c      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	4b5a      	ldr	r3, [pc, #360]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d121      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0a6      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e09a      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d7a:	4b4e      	ldr	r3, [pc, #312]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e08e      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e086      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4943      	ldr	r1, [pc, #268]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dac:	f7ff f814 	bl	8000dd8 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff f810 	bl	8000dd8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e06e      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d208      	bcs.n	8001e0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	492b      	ldr	r1, [pc, #172]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d210      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 0207 	bic.w	r2, r3, #7
 8001e20:	4923      	ldr	r1, [pc, #140]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e036      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4918      	ldr	r1, [pc, #96]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4910      	ldr	r1, [pc, #64]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e78:	f000 f824 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	490b      	ldr	r1, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e8a:	5ccb      	ldrb	r3, [r1, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1f8>)
 8001e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1fc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe ff4b 	bl	8000d38 <HAL_InitTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08003b4c 	.word	0x08003b4c
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000004 	.word	0x20000004

08001ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d121      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d11e      	bne.n	8001f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f0a:	0a1b      	lsrs	r3, r3, #8
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	e005      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e004      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d134      	bne.n	8001fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d003      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0xac>
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f6c:	617b      	str	r3, [r7, #20]
      break;
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f72:	617b      	str	r3, [r7, #20]
      break;
 8001f74:	e002      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	617b      	str	r3, [r7, #20]
      break;
 8001f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	3301      	adds	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	fb03 f202 	mul.w	r2, r3, r2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	0e5b      	lsrs	r3, r3, #25
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	3301      	adds	r3, #1
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08003b64 	.word	0x08003b64
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4904      	ldr	r1, [pc, #16]	; (800201c <HAL_RCC_GetPCLK1Freq+0x28>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08003b5c 	.word	0x08003b5c

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002024:	f7ff ffda 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4904      	ldr	r1, [pc, #16]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	08003b5c 	.word	0x08003b5c

0800204c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002064:	f7ff f9ee 	bl	8001444 <HAL_PWREx_GetVoltageRange>
 8002068:	6178      	str	r0, [r7, #20]
 800206a:	e014      	b.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	4a24      	ldr	r2, [pc, #144]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002076:	6593      	str	r3, [r2, #88]	; 0x58
 8002078:	4b22      	ldr	r3, [pc, #136]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002084:	f7ff f9de 	bl	8001444 <HAL_PWREx_GetVoltageRange>
 8002088:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800209c:	d10b      	bne.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b80      	cmp	r3, #128	; 0x80
 80020a2:	d919      	bls.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2ba0      	cmp	r3, #160	; 0xa0
 80020a8:	d902      	bls.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020aa:	2302      	movs	r3, #2
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	e013      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b0:	2301      	movs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e010      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b80      	cmp	r3, #128	; 0x80
 80020ba:	d902      	bls.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020bc:	2303      	movs	r3, #3
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e00a      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b80      	cmp	r3, #128	; 0x80
 80020c6:	d102      	bne.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020c8:	2302      	movs	r3, #2
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e004      	b.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b70      	cmp	r3, #112	; 0x70
 80020d2:	d101      	bne.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d4:	2301      	movs	r3, #1
 80020d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 0207 	bic.w	r2, r3, #7
 80020e0:	4909      	ldr	r1, [pc, #36]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d001      	beq.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	40022000 	.word	0x40022000

0800210c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002114:	2300      	movs	r3, #0
 8002116:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002118:	2300      	movs	r3, #0
 800211a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002124:	2b00      	cmp	r3, #0
 8002126:	d041      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800212c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002130:	d02a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002132:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002136:	d824      	bhi.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800213c:	d008      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800213e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002142:	d81e      	bhi.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214c:	d010      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800214e:	e018      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002150:	4b86      	ldr	r3, [pc, #536]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a85      	ldr	r2, [pc, #532]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800215c:	e015      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3304      	adds	r3, #4
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fabb 	bl	80026e0 <RCCEx_PLLSAI1_Config>
 800216a:	4603      	mov	r3, r0
 800216c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800216e:	e00c      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3320      	adds	r3, #32
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fba6 	bl	80028c8 <RCCEx_PLLSAI2_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002180:	e003      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	74fb      	strb	r3, [r7, #19]
      break;
 8002186:	e000      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002190:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800219e:	4973      	ldr	r1, [pc, #460]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021a6:	e001      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d041      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021c0:	d02a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021c6:	d824      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021cc:	d008      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d2:	d81e      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d010      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021de:	e018      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021e0:	4b62      	ldr	r3, [pc, #392]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a61      	ldr	r2, [pc, #388]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ec:	e015      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fa73 	bl	80026e0 <RCCEx_PLLSAI1_Config>
 80021fa:	4603      	mov	r3, r0
 80021fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021fe:	e00c      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3320      	adds	r3, #32
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fb5e 	bl	80028c8 <RCCEx_PLLSAI2_Config>
 800220c:	4603      	mov	r3, r0
 800220e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002210:	e003      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	74fb      	strb	r3, [r7, #19]
      break;
 8002216:	e000      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10b      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002220:	4b52      	ldr	r3, [pc, #328]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800222e:	494f      	ldr	r1, [pc, #316]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002236:	e001      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002238:	7cfb      	ldrb	r3, [r7, #19]
 800223a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a0 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00d      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	4a40      	ldr	r2, [pc, #256]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	; 0x58
 8002270:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3a      	ldr	r2, [pc, #232]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800228c:	f7fe fda4 	bl	8000dd8 <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002292:	e009      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002294:	f7fe fda0 	bl	8000dd8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d902      	bls.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	74fb      	strb	r3, [r7, #19]
        break;
 80022a6:	e005      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022a8:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d15c      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01f      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d019      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d016      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fd5f 	bl	8000dd8 <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231c:	e00b      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fd5b 	bl	8000dd8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d902      	bls.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	74fb      	strb	r3, [r7, #19]
            break;
 8002334:	e006      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ec      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235a:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002362:	e009      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
 8002368:	e006      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002378:	7c7b      	ldrb	r3, [r7, #17]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b9e      	ldr	r3, [pc, #632]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a9d      	ldr	r2, [pc, #628]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002396:	4b98      	ldr	r3, [pc, #608]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f023 0203 	bic.w	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a4:	4994      	ldr	r1, [pc, #592]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 020c 	bic.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	498c      	ldr	r1, [pc, #560]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023da:	4b87      	ldr	r3, [pc, #540]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4983      	ldr	r1, [pc, #524]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023fc:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	497b      	ldr	r1, [pc, #492]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242c:	4972      	ldr	r1, [pc, #456]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0320 	and.w	r3, r3, #32
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002440:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244e:	496a      	ldr	r1, [pc, #424]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002462:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	4961      	ldr	r1, [pc, #388]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002484:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	4959      	ldr	r1, [pc, #356]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b4:	4950      	ldr	r1, [pc, #320]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c8:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	4948      	ldr	r1, [pc, #288]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	493f      	ldr	r1, [pc, #252]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d028      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800250c:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	4937      	ldr	r1, [pc, #220]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252a:	d106      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a31      	ldr	r2, [pc, #196]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002536:	60d3      	str	r3, [r2, #12]
 8002538:	e011      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002542:	d10c      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f8c8 	bl	80026e0 <RCCEx_PLLSAI1_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d028      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800256a:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	491f      	ldr	r1, [pc, #124]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002588:	d106      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002594:	60d3      	str	r3, [r2, #12]
 8002596:	e011      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f899 	bl	80026e0 <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02b      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e6:	d109      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f2:	60d3      	str	r3, [r2, #12]
 80025f4:	e014      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002604:	d10c      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f867 	bl	80026e0 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d02f      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800263a:	4928      	ldr	r1, [pc, #160]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264a:	d10d      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	2102      	movs	r1, #2
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f844 	bl	80026e0 <RCCEx_PLLSAI1_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d014      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	74bb      	strb	r3, [r7, #18]
 8002666:	e011      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800266c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002670:	d10c      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3320      	adds	r3, #32
 8002676:	2102      	movs	r1, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f925 	bl	80028c8 <RCCEx_PLLSAI2_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002682:	7cfb      	ldrb	r3, [r7, #19]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a6:	490d      	ldr	r1, [pc, #52]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ca:	4904      	ldr	r1, [pc, #16]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ee:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d018      	beq.n	800272c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0203 	and.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d10d      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
       ||
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002712:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
       ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d047      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e044      	b.n	80027b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d018      	beq.n	8002766 <RCCEx_PLLSAI1_Config+0x86>
 8002734:	2b03      	cmp	r3, #3
 8002736:	d825      	bhi.n	8002784 <RCCEx_PLLSAI1_Config+0xa4>
 8002738:	2b01      	cmp	r3, #1
 800273a:	d002      	beq.n	8002742 <RCCEx_PLLSAI1_Config+0x62>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d009      	beq.n	8002754 <RCCEx_PLLSAI1_Config+0x74>
 8002740:	e020      	b.n	8002784 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002742:	4b60      	ldr	r3, [pc, #384]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11d      	bne.n	800278a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002752:	e01a      	b.n	800278a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002754:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002764:	e013      	b.n	800278e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002766:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10f      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002772:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002782:	e006      	b.n	8002792 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	73fb      	strb	r3, [r7, #15]
      break;
 8002788:	e004      	b.n	8002794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800278a:	bf00      	nop
 800278c:	e002      	b.n	8002794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002792:	bf00      	nop
    }

    if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	430b      	orrs	r3, r1
 80027b0:	4944      	ldr	r1, [pc, #272]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d17d      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027bc:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a40      	ldr	r2, [pc, #256]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7fe fb06 	bl	8000dd8 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ce:	e009      	b.n	80027e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027d0:	f7fe fb02 	bl	8000dd8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	73fb      	strb	r3, [r7, #15]
        break;
 80027e2:	e005      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ef      	bne.n	80027d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d160      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d111      	bne.n	8002820 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6892      	ldr	r2, [r2, #8]
 800280c:	0211      	lsls	r1, r2, #8
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68d2      	ldr	r2, [r2, #12]
 8002812:	0912      	lsrs	r2, r2, #4
 8002814:	0452      	lsls	r2, r2, #17
 8002816:	430a      	orrs	r2, r1
 8002818:	492a      	ldr	r1, [pc, #168]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	610b      	str	r3, [r1, #16]
 800281e:	e027      	b.n	8002870 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d112      	bne.n	800284c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002826:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800282e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	0211      	lsls	r1, r2, #8
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6912      	ldr	r2, [r2, #16]
 800283c:	0852      	lsrs	r2, r2, #1
 800283e:	3a01      	subs	r2, #1
 8002840:	0552      	lsls	r2, r2, #21
 8002842:	430a      	orrs	r2, r1
 8002844:	491f      	ldr	r1, [pc, #124]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	610b      	str	r3, [r1, #16]
 800284a:	e011      	b.n	8002870 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6892      	ldr	r2, [r2, #8]
 800285c:	0211      	lsls	r1, r2, #8
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6952      	ldr	r2, [r2, #20]
 8002862:	0852      	lsrs	r2, r2, #1
 8002864:	3a01      	subs	r2, #1
 8002866:	0652      	lsls	r2, r2, #25
 8002868:	430a      	orrs	r2, r1
 800286a:	4916      	ldr	r1, [pc, #88]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800287a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe faac 	bl	8000dd8 <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002882:	e009      	b.n	8002898 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002884:	f7fe faa8 	bl	8000dd8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d902      	bls.n	8002898 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	73fb      	strb	r3, [r7, #15]
          break;
 8002896:	e005      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ef      	beq.n	8002884 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	4904      	ldr	r1, [pc, #16]	; (80028c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028d6:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d018      	beq.n	8002914 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80028e2:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0203 	and.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10d      	bne.n	800290e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
       ||
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
       ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d047      	beq.n	800299e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e044      	b.n	800299e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d018      	beq.n	800294e <RCCEx_PLLSAI2_Config+0x86>
 800291c:	2b03      	cmp	r3, #3
 800291e:	d825      	bhi.n	800296c <RCCEx_PLLSAI2_Config+0xa4>
 8002920:	2b01      	cmp	r3, #1
 8002922:	d002      	beq.n	800292a <RCCEx_PLLSAI2_Config+0x62>
 8002924:	2b02      	cmp	r3, #2
 8002926:	d009      	beq.n	800293c <RCCEx_PLLSAI2_Config+0x74>
 8002928:	e020      	b.n	800296c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800292a:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d11d      	bne.n	8002972 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293a:	e01a      	b.n	8002972 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d116      	bne.n	8002976 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294c:	e013      	b.n	8002976 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800296a:	e006      	b.n	800297a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      break;
 8002970:	e004      	b.n	800297c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800297a:	bf00      	nop
    }

    if(status == HAL_OK)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10d      	bne.n	800299e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6819      	ldr	r1, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	430b      	orrs	r3, r1
 8002998:	4939      	ldr	r1, [pc, #228]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d167      	bne.n	8002a74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a35      	ldr	r2, [pc, #212]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b0:	f7fe fa12 	bl	8000dd8 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029b6:	e009      	b.n	80029cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029b8:	f7fe fa0e 	bl	8000dd8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ca:	e005      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ef      	bne.n	80029b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d14a      	bne.n	8002a74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e4:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6892      	ldr	r2, [r2, #8]
 80029f4:	0211      	lsls	r1, r2, #8
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	0912      	lsrs	r2, r2, #4
 80029fc:	0452      	lsls	r2, r2, #17
 80029fe:	430a      	orrs	r2, r1
 8002a00:	491f      	ldr	r1, [pc, #124]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	614b      	str	r3, [r1, #20]
 8002a06:	e011      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	0211      	lsls	r1, r2, #8
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6912      	ldr	r2, [r2, #16]
 8002a1e:	0852      	lsrs	r2, r2, #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	0652      	lsls	r2, r2, #25
 8002a24:	430a      	orrs	r2, r1
 8002a26:	4916      	ldr	r1, [pc, #88]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe f9ce 	bl	8000dd8 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a3e:	e009      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a40:	f7fe f9ca 	bl	8000dd8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d902      	bls.n	8002a54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	73fb      	strb	r3, [r7, #15]
          break;
 8002a52:	e005      	b.n	8002a60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ef      	beq.n	8002a40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4904      	ldr	r1, [pc, #16]	; (8002a80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e095      	b.n	8002bc2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d108      	bne.n	8002ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa6:	d009      	beq.n	8002abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
 8002aae:	e005      	b.n	8002abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fd ff8e 	bl	80009f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002afc:	d902      	bls.n	8002b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e002      	b.n	8002b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b12:	d007      	beq.n	8002b24 <HAL_SPI_Init+0xa0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b1c:	d002      	beq.n	8002b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	ea42 0103 	orr.w	r1, r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	f003 0204 	and.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ba0:	ea42 0103 	orr.w	r1, r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b088      	sub	sp, #32
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_SPI_Transmit+0x22>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e158      	b.n	8002e9e <HAL_SPI_Transmit+0x2d4>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf4:	f7fe f8f0 	bl	8000dd8 <HAL_GetTick>
 8002bf8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c0e:	e13d      	b.n	8002e8c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_SPI_Transmit+0x52>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c20:	e134      	b.n	8002e8c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6c:	d10f      	bne.n	8002c8e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d007      	beq.n	8002cac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cb4:	d94b      	bls.n	8002d4e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Transmit+0xfa>
 8002cbe:	8afb      	ldrh	r3, [r7, #22]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d13e      	bne.n	8002d42 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	881a      	ldrh	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	1c9a      	adds	r2, r3, #2
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ce8:	e02b      	b.n	8002d42 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d112      	bne.n	8002d1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d1c:	e011      	b.n	8002d42 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1e:	f7fe f85b 	bl	8000dd8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d803      	bhi.n	8002d36 <HAL_SPI_Transmit+0x16c>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d102      	bne.n	8002d3c <HAL_SPI_Transmit+0x172>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d40:	e0a4      	b.n	8002e8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ce      	bne.n	8002cea <HAL_SPI_Transmit+0x120>
 8002d4c:	e07c      	b.n	8002e48 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_Transmit+0x192>
 8002d56:	8afb      	ldrh	r3, [r7, #22]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d170      	bne.n	8002e3e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d912      	bls.n	8002d8c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b02      	subs	r3, #2
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d8a:	e058      	b.n	8002e3e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002db2:	e044      	b.n	8002e3e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d12b      	bne.n	8002e1a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d912      	bls.n	8002df2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b02      	subs	r3, #2
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002df0:	e025      	b.n	8002e3e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e18:	e011      	b.n	8002e3e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1a:	f7fd ffdd 	bl	8000dd8 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d803      	bhi.n	8002e32 <HAL_SPI_Transmit+0x268>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_Transmit+0x26e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e3c:	e026      	b.n	8002e8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1b5      	bne.n	8002db4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f949 	bl	80030e4 <SPI_EndRxTxTransaction>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e000      	b.n	8002e8c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eb8:	f7fd ff8e 	bl	8000dd8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ec8:	f7fd ff86 	bl	8000dd8 <HAL_GetTick>
 8002ecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	0d1b      	lsrs	r3, r3, #20
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ede:	e054      	b.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d050      	beq.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee8:	f7fd ff76 	bl	8000dd8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d902      	bls.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d13d      	bne.n	8002f7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f16:	d111      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d004      	beq.n	8002f2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d107      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f44:	d10f      	bne.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e017      	b.n	8002faa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d19b      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fca:	f7fd ff05 	bl	8000dd8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fda:	f7fd fefd 	bl	8000dd8 <HAL_GetTick>
 8002fde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00da      	lsls	r2, r3, #3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	0d1b      	lsrs	r3, r3, #20
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003000:	e060      	b.n	80030c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003008:	d107      	bne.n	800301a <SPI_WaitFifoStateUntilTimeout+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003018:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d050      	beq.n	80030c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003022:	f7fd fed9 	bl	8000dd8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	429a      	cmp	r2, r3
 8003030:	d902      	bls.n	8003038 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13d      	bne.n	80030b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003046:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003050:	d111      	bne.n	8003076 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	d004      	beq.n	8003066 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d107      	bne.n	8003076 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307e:	d10f      	bne.n	80030a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800309e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e010      	b.n	80030d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d196      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ff5b 	bl	8002fb8 <SPI_WaitFifoStateUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e027      	b.n	8003168 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff fec0 	bl	8002ea8 <SPI_WaitFlagStateUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e014      	b.n	8003168 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff ff34 	bl	8002fb8 <SPI_WaitFifoStateUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e000      	b.n	8003168 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e040      	b.n	8003204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fd2a 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f82c 	bl	800320c <UART_SetConfig>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e022      	b.n	8003204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fad8 	bl	800377c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb5f 	bl	80038c0 <UART_CheckIdleState>
 8003202:	4603      	mov	r3, r0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b08a      	sub	sp, #40	; 0x28
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4313      	orrs	r3, r2
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4ba4      	ldr	r3, [pc, #656]	; (80034cc <UART_SetConfig+0x2c0>)
 800323c:	4013      	ands	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003244:	430b      	orrs	r3, r1
 8003246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a99      	ldr	r2, [pc, #612]	; (80034d0 <UART_SetConfig+0x2c4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003274:	4313      	orrs	r3, r2
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a90      	ldr	r2, [pc, #576]	; (80034d4 <UART_SetConfig+0x2c8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d126      	bne.n	80032e4 <UART_SetConfig+0xd8>
 8003296:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <UART_SetConfig+0x2cc>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d81b      	bhi.n	80032dc <UART_SetConfig+0xd0>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <UART_SetConfig+0xa0>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cd 	.word	0x080032cd
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e116      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80032c4:	2302      	movs	r3, #2
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e112      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80032cc:	2304      	movs	r3, #4
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e10e      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80032d4:	2308      	movs	r3, #8
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e10a      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80032dc:	2310      	movs	r3, #16
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e106      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7c      	ldr	r2, [pc, #496]	; (80034dc <UART_SetConfig+0x2d0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d138      	bne.n	8003360 <UART_SetConfig+0x154>
 80032ee:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <UART_SetConfig+0x2cc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d82d      	bhi.n	8003358 <UART_SetConfig+0x14c>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <UART_SetConfig+0xf8>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003339 	.word	0x08003339
 8003308:	08003359 	.word	0x08003359
 800330c:	08003359 	.word	0x08003359
 8003310:	08003359 	.word	0x08003359
 8003314:	08003349 	.word	0x08003349
 8003318:	08003359 	.word	0x08003359
 800331c:	08003359 	.word	0x08003359
 8003320:	08003359 	.word	0x08003359
 8003324:	08003341 	.word	0x08003341
 8003328:	08003359 	.word	0x08003359
 800332c:	08003359 	.word	0x08003359
 8003330:	08003359 	.word	0x08003359
 8003334:	08003351 	.word	0x08003351
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800333e:	e0d8      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e0d4      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e0d0      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e0cc      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e0c8      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5e      	ldr	r2, [pc, #376]	; (80034e0 <UART_SetConfig+0x2d4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d125      	bne.n	80033b6 <UART_SetConfig+0x1aa>
 800336a:	4b5b      	ldr	r3, [pc, #364]	; (80034d8 <UART_SetConfig+0x2cc>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d016      	beq.n	80033a6 <UART_SetConfig+0x19a>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d818      	bhi.n	80033ae <UART_SetConfig+0x1a2>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d00a      	beq.n	8003396 <UART_SetConfig+0x18a>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d814      	bhi.n	80033ae <UART_SetConfig+0x1a2>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <UART_SetConfig+0x182>
 8003388:	2b10      	cmp	r3, #16
 800338a:	d008      	beq.n	800339e <UART_SetConfig+0x192>
 800338c:	e00f      	b.n	80033ae <UART_SetConfig+0x1a2>
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003394:	e0ad      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003396:	2302      	movs	r3, #2
 8003398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339c:	e0a9      	b.n	80034f2 <UART_SetConfig+0x2e6>
 800339e:	2304      	movs	r3, #4
 80033a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a4:	e0a5      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80033a6:	2308      	movs	r3, #8
 80033a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ac:	e0a1      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80033ae:	2310      	movs	r3, #16
 80033b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b4:	e09d      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a4a      	ldr	r2, [pc, #296]	; (80034e4 <UART_SetConfig+0x2d8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d125      	bne.n	800340c <UART_SetConfig+0x200>
 80033c0:	4b45      	ldr	r3, [pc, #276]	; (80034d8 <UART_SetConfig+0x2cc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033ca:	2bc0      	cmp	r3, #192	; 0xc0
 80033cc:	d016      	beq.n	80033fc <UART_SetConfig+0x1f0>
 80033ce:	2bc0      	cmp	r3, #192	; 0xc0
 80033d0:	d818      	bhi.n	8003404 <UART_SetConfig+0x1f8>
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d00a      	beq.n	80033ec <UART_SetConfig+0x1e0>
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d814      	bhi.n	8003404 <UART_SetConfig+0x1f8>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <UART_SetConfig+0x1d8>
 80033de:	2b40      	cmp	r3, #64	; 0x40
 80033e0:	d008      	beq.n	80033f4 <UART_SetConfig+0x1e8>
 80033e2:	e00f      	b.n	8003404 <UART_SetConfig+0x1f8>
 80033e4:	2300      	movs	r3, #0
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ea:	e082      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80033ec:	2302      	movs	r3, #2
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f2:	e07e      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80033f4:	2304      	movs	r3, #4
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fa:	e07a      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80033fc:	2308      	movs	r3, #8
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e076      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003404:	2310      	movs	r3, #16
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e072      	b.n	80034f2 <UART_SetConfig+0x2e6>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a35      	ldr	r2, [pc, #212]	; (80034e8 <UART_SetConfig+0x2dc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d12a      	bne.n	800346c <UART_SetConfig+0x260>
 8003416:	4b30      	ldr	r3, [pc, #192]	; (80034d8 <UART_SetConfig+0x2cc>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003424:	d01a      	beq.n	800345c <UART_SetConfig+0x250>
 8003426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800342a:	d81b      	bhi.n	8003464 <UART_SetConfig+0x258>
 800342c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003430:	d00c      	beq.n	800344c <UART_SetConfig+0x240>
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d815      	bhi.n	8003464 <UART_SetConfig+0x258>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <UART_SetConfig+0x238>
 800343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003440:	d008      	beq.n	8003454 <UART_SetConfig+0x248>
 8003442:	e00f      	b.n	8003464 <UART_SetConfig+0x258>
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e052      	b.n	80034f2 <UART_SetConfig+0x2e6>
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e04e      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e04a      	b.n	80034f2 <UART_SetConfig+0x2e6>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e046      	b.n	80034f2 <UART_SetConfig+0x2e6>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e042      	b.n	80034f2 <UART_SetConfig+0x2e6>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <UART_SetConfig+0x2c4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d13a      	bne.n	80034ec <UART_SetConfig+0x2e0>
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <UART_SetConfig+0x2cc>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003484:	d01a      	beq.n	80034bc <UART_SetConfig+0x2b0>
 8003486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800348a:	d81b      	bhi.n	80034c4 <UART_SetConfig+0x2b8>
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003490:	d00c      	beq.n	80034ac <UART_SetConfig+0x2a0>
 8003492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003496:	d815      	bhi.n	80034c4 <UART_SetConfig+0x2b8>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <UART_SetConfig+0x298>
 800349c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a0:	d008      	beq.n	80034b4 <UART_SetConfig+0x2a8>
 80034a2:	e00f      	b.n	80034c4 <UART_SetConfig+0x2b8>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034aa:	e022      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e01e      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80034b4:	2304      	movs	r3, #4
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e01a      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80034bc:	2308      	movs	r3, #8
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e016      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e012      	b.n	80034f2 <UART_SetConfig+0x2e6>
 80034cc:	efff69f3 	.word	0xefff69f3
 80034d0:	40008000 	.word	0x40008000
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40004400 	.word	0x40004400
 80034e0:	40004800 	.word	0x40004800
 80034e4:	40004c00 	.word	0x40004c00
 80034e8:	40005000 	.word	0x40005000
 80034ec:	2310      	movs	r3, #16
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a9f      	ldr	r2, [pc, #636]	; (8003774 <UART_SetConfig+0x568>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d17a      	bne.n	80035f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003500:	2b08      	cmp	r3, #8
 8003502:	d824      	bhi.n	800354e <UART_SetConfig+0x342>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <UART_SetConfig+0x300>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003531 	.word	0x08003531
 8003510:	0800354f 	.word	0x0800354f
 8003514:	08003539 	.word	0x08003539
 8003518:	0800354f 	.word	0x0800354f
 800351c:	0800353f 	.word	0x0800353f
 8003520:	0800354f 	.word	0x0800354f
 8003524:	0800354f 	.word	0x0800354f
 8003528:	0800354f 	.word	0x0800354f
 800352c:	08003547 	.word	0x08003547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003530:	f7fe fd60 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003534:	61f8      	str	r0, [r7, #28]
        break;
 8003536:	e010      	b.n	800355a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003538:	4b8f      	ldr	r3, [pc, #572]	; (8003778 <UART_SetConfig+0x56c>)
 800353a:	61fb      	str	r3, [r7, #28]
        break;
 800353c:	e00d      	b.n	800355a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353e:	f7fe fcc1 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8003542:	61f8      	str	r0, [r7, #28]
        break;
 8003544:	e009      	b.n	800355a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354a:	61fb      	str	r3, [r7, #28]
        break;
 800354c:	e005      	b.n	800355a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80fb 	beq.w	8003758 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	429a      	cmp	r2, r3
 8003570:	d305      	bcc.n	800357e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	429a      	cmp	r2, r3
 800357c:	d903      	bls.n	8003586 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003584:	e0e8      	b.n	8003758 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2200      	movs	r2, #0
 800358a:	461c      	mov	r4, r3
 800358c:	4615      	mov	r5, r2
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	022b      	lsls	r3, r5, #8
 8003598:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800359c:	0222      	lsls	r2, r4, #8
 800359e:	68f9      	ldr	r1, [r7, #12]
 80035a0:	6849      	ldr	r1, [r1, #4]
 80035a2:	0849      	lsrs	r1, r1, #1
 80035a4:	2000      	movs	r0, #0
 80035a6:	4688      	mov	r8, r1
 80035a8:	4681      	mov	r9, r0
 80035aa:	eb12 0a08 	adds.w	sl, r2, r8
 80035ae:	eb43 0b09 	adc.w	fp, r3, r9
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c0:	4650      	mov	r0, sl
 80035c2:	4659      	mov	r1, fp
 80035c4:	f7fc fe00 	bl	80001c8 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d6:	d308      	bcc.n	80035ea <UART_SetConfig+0x3de>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d204      	bcs.n	80035ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	e0b6      	b.n	8003758 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035f0:	e0b2      	b.n	8003758 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fa:	d15e      	bne.n	80036ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003600:	2b08      	cmp	r3, #8
 8003602:	d828      	bhi.n	8003656 <UART_SetConfig+0x44a>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0x400>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	08003631 	.word	0x08003631
 8003610:	08003639 	.word	0x08003639
 8003614:	08003641 	.word	0x08003641
 8003618:	08003657 	.word	0x08003657
 800361c:	08003647 	.word	0x08003647
 8003620:	08003657 	.word	0x08003657
 8003624:	08003657 	.word	0x08003657
 8003628:	08003657 	.word	0x08003657
 800362c:	0800364f 	.word	0x0800364f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003630:	f7fe fce0 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003634:	61f8      	str	r0, [r7, #28]
        break;
 8003636:	e014      	b.n	8003662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003638:	f7fe fcf2 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 800363c:	61f8      	str	r0, [r7, #28]
        break;
 800363e:	e010      	b.n	8003662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003640:	4b4d      	ldr	r3, [pc, #308]	; (8003778 <UART_SetConfig+0x56c>)
 8003642:	61fb      	str	r3, [r7, #28]
        break;
 8003644:	e00d      	b.n	8003662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003646:	f7fe fc3d 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 800364a:	61f8      	str	r0, [r7, #28]
        break;
 800364c:	e009      	b.n	8003662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003652:	61fb      	str	r3, [r7, #28]
        break;
 8003654:	e005      	b.n	8003662 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d077      	beq.n	8003758 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005a      	lsls	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b0f      	cmp	r3, #15
 8003682:	d916      	bls.n	80036b2 <UART_SetConfig+0x4a6>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368a:	d212      	bcs.n	80036b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	b29b      	uxth	r3, r3
 8003690:	f023 030f 	bic.w	r3, r3, #15
 8003694:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	8afb      	ldrh	r3, [r7, #22]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	8afa      	ldrh	r2, [r7, #22]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	e052      	b.n	8003758 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036b8:	e04e      	b.n	8003758 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d827      	bhi.n	8003712 <UART_SetConfig+0x506>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <UART_SetConfig+0x4bc>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003713 	.word	0x08003713
 80036d8:	08003703 	.word	0x08003703
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003713 	.word	0x08003713
 80036e4:	08003713 	.word	0x08003713
 80036e8:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7fe fc82 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e014      	b.n	800371e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe fc94 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e010      	b.n	800371e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <UART_SetConfig+0x56c>)
 80036fe:	61fb      	str	r3, [r7, #28]
        break;
 8003700:	e00d      	b.n	800371e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fbdf 	bl	8001ec4 <HAL_RCC_GetSysClockFreq>
 8003706:	61f8      	str	r0, [r7, #28]
        break;
 8003708:	e009      	b.n	800371e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	61fb      	str	r3, [r7, #28]
        break;
 8003710:	e005      	b.n	800371e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800371c:	bf00      	nop
    }

    if (pclk != 0U)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d019      	beq.n	8003758 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	085a      	lsrs	r2, r3, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	441a      	add	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	d909      	bls.n	8003752 <UART_SetConfig+0x546>
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d205      	bcs.n	8003752 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
 8003750:	e002      	b.n	8003758 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003764:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003768:	4618      	mov	r0, r3
 800376a:	3728      	adds	r7, #40	; 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40008000 	.word	0x40008000
 8003778:	00f42400 	.word	0x00f42400

0800377c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01a      	beq.n	8003892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800387a:	d10a      	bne.n	8003892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d0:	f7fd fa82 	bl	8000dd8 <HAL_GetTick>
 80038d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d10e      	bne.n	8003902 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f82d 	bl	8003952 <UART_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e023      	b.n	800394a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d10e      	bne.n	800392e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f817 	bl	8003952 <UART_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e00d      	b.n	800394a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b09c      	sub	sp, #112	; 0x70
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003962:	e0a5      	b.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	f000 80a1 	beq.w	8003ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd fa33 	bl	8000dd8 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <UART_WaitOnFlagUntilTimeout+0x32>
 800397e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003980:	2b00      	cmp	r3, #0
 8003982:	d13e      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003994:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003998:	667b      	str	r3, [r7, #100]	; 0x64
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e6      	bne.n	8003984 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	f023 0301 	bic.w	r3, r3, #1
 80039cc:	663b      	str	r3, [r7, #96]	; 0x60
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3308      	adds	r3, #8
 80039d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e067      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d04f      	beq.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1e:	d147      	bne.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e6      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a7c:	623a      	str	r2, [r7, #32]
 8003a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	69f9      	ldr	r1, [r7, #28]
 8003a82:	6a3a      	ldr	r2, [r7, #32]
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e010      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	f43f af4a 	beq.w	8003964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3770      	adds	r7, #112	; 0x70
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <__libc_init_array+0x38>)
 8003ae0:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	4d0b      	ldr	r5, [pc, #44]	; (8003b1c <__libc_init_array+0x40>)
 8003aee:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <__libc_init_array+0x44>)
 8003af0:	f000 f820 	bl	8003b34 <_init>
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	2600      	movs	r6, #0
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08003b9c 	.word	0x08003b9c
 8003b18:	08003b9c 	.word	0x08003b9c
 8003b1c:	08003b9c 	.word	0x08003b9c
 8003b20:	08003ba0 	.word	0x08003ba0

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <_init>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr

08003b40 <_fini>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr
